Why I like GO
My current stack
23 Jan 2020
Tags: go, tools, frameworks

Radu Ioan Fericean
Freelance Developer
radu@fericean.ro
https://github.com/rif

* How did I come to use GO (2011)

Old school:

- C/C++, Java, C#, Python, Erlang, Scala
- Not very excited about quality/price ratio
- Is there something new?

New shcool:

- D and Go (Rust, Nim, Kotlin or Clojure were either unknown or did not exist at all)

* What I was looking for

- execution speed (compiled is better)
- minimalism (like C but not C)
- Python without the interpreter

* Working environment

- Linux
- Arch on development, Ubuntu for servers
- i3wm / sway (wayland)
- zsh (zinit, zgen, zplug)
- chezmoi
- gopass
- Taskwarrior
- ranger (nnn,lf)

* Editor and devtools

- Emacs (Centaur)
- lsp-mode and gopls
- goimports
- gotests
- gomodifytags
- fillstruct
- delve
- go-impl

* Deployment

- Tasks
- Ansible
- Influx TIC (Prometheus, ELK, Grafana)
- Docker
- Vagrant
- goreleaser
- go.mod (dep, glide)
- GIT

* Testing and Logging

- standard logging for 99% of tests
- ory/dockertest
- zerolog
- zap
.play logging.go

* Web frameworks

- Echo (gin, negroni, martini, beego, revel, ...)
- Vue
- Vuetify
- websockets (gobwas / ws)
.code webframework.go

* Mobile

- client/server
- WebView / vue
- cordova

* GUI (desktop)

- Electron
- QT (GTK)
- fyne (incomplete)
.play gui.go /^import/,/^}/

* Databases

- storm (bolt)
- elasticsearch
- gorm, sqlx
.code storm.go

* Other

- NATS (NSQ)
- Ristretto (cache)
- JSON (msgpack,gob,protocol buffers)
- gjson
- Caddy
- Restic

* GJSON
.code gjson.go


#.code logging.go /^func main/,/^}/
#.image image.jpg
#.background image.jpg
#.iframe http://foo
#.link http://foo label
#.html file.html
#.caption _Gopher_ by [[https://www.instagram.com/reneefrench/][Ren√©e French]]
